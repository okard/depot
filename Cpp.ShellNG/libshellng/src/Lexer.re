

#pragma once
#ifndef __LEXER_RE2C__
#define __LEXER_RE2C__

#include <cstdio>

// TOKENS are generated by lemon parser generator
// so re2c depends on lemon
// weird to have first parser then lexer dependency

#include "Parser.h"


unsigned int Lexer::next(Token& tok)
{
std:
    //doing fill by hand here?

    m_token = re2c_cursor_;

    //On entry, YYCURSOR is assumed to point to the first character of the current token. 
    //On exit, YYCURSOR will point to the first character of the following token.

    //Expression of type *YYCTYPE that marks the end of the buffer (YYLIMIT[-1] is the last character in the buffer). 
    //The generated code repeatedly compares YYCURSOR to YYLIMIT to determine when the buffer needs (re)filling.
    
    //YYMARKER l-expression of type *YYCTYPE. 
    //The generated code saves backtracking information in YYMARKER. 
    //Some easy scanners might not use this.

    //YYGETSTATE()

    //re2c:define:YYSETSTATE@state = #;
    //re2c:define:YYSETSTATE       = "s->state = #;";

    //re2c:define:YYGETSTATE       = "s->state";
    //re2c:define:YYGETSTATE:naked = 1;
    

    /*!re2c
        re2c:define:YYCTYPE = "char";
        re2c:define:YYCURSOR = re2c_cursor_;
        re2c:define:YYLIMIT = re2c_limit_;
        re2c:define:YYMARKER = re2c_marker_;
        re2c:define:YYFILL:naked = 1;
        re2c:define:YYFILL@len = #;
        re2c:define:YYFILL = "if (!fill(#)) { return 0; }";
        re2c:yyfill:enable = 1;
        re2c:indent:top = 2;
        re2c:indent:string=" ";

        INTEGER = [1-9][0-9]*;
        IDENTIFIER = [a-zA-Z_][a-zA-Z0-9_]*;
        STRING_LITERAL = ".*";
        WS = [ \r\n\t\f];
        ANY_CHARACTER = [^];
        NULLSTR = [\x00];

        
        NULLSTR {
            return 0;
        }

        "def" { 
            return TOKEN_KW_DEF; 
        }
        IDENTIFIER {
            tok.identifier = const_cast<char*>("");
            return TOKEN_IDENTIFIER;
        }
        INTEGER {
            tok.integer = 0;
            //yylval.int_value = atoi(this->text().c_str());
            return TOKEN_INTEGER;
        }
        WS {
            //count lines
            goto std;
        }
        ANY_CHARACTER {
            printf("unexpected character: '%c(%d)'\n", *m_token, *m_token);
            goto std;
        }

    */
}


/*
 Save RE2C MAX FILL for internal buffer handling
*/
/*!max:re2c */
const unsigned int Lexer::RE2C_MAXFILL = YYMAXFILL;

#endif

